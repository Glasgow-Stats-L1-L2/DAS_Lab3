[["index.html", "Data Analysis: R Markdown Introduction", " Data Analysis: R Markdown Introduction A vital part of data analysis is communicating the results of an analysis. This usually takes the form or a report which summarizes the data analysis process and relevant findings. There is a helpful guide to writing statistical reports following a statistical analysis in the \"Skills Tuesdays\" Material section of Moodle here and you are expected to familiarize yourself with this resource, especially the sections on \"Structure\" and \"Presentation\". This week's tutorial introduces you to R Markdown, a very efficient way of producing statistical reports that you will use to produce reports in the two class tests and the group project in Data Analysis Skills. You will also be required to use R Markdown to produce a report on your Masters Project in the summer. In this tutorial we will take what we have learned in previous weeks and produce a report using R Markdown. The package rmarkdown allows reports to be created within R, thus allowing for R code and output to be easily embedded within a report. Hence, all of the R code and plots obtained from an analysis are contained within a single file. In this week's section on Moodle there is an Example Report produced using R Markdown relating to fitting a regression model using one numerical explanatory variable (we will consider fitting these models in more detail next week). The corresponding R Markdown file (.Rmd) can also be downloaded and opened in R to see how the document was produced (press the Knit button to create the PDF version). It is advised to have this document open within RStudio while working through the remaining sections in order to see examples put into practice. The following sections will take you through the different steps required to produce the Example Report on Moodle. "],["creating-a-new-r-markdown-document-from-scratch.html", "Creating a new R Markdown document from scratch", " Creating a new R Markdown document from scratch If you want to create a new R Markdown document from scratch within RStudio you can go to: File -&gt; New File -&gt; R Markdown... This will open the following window within RStudio: From here select Document and the Default Output Format as PDF. Name your document Week3DA and select OK. This will open within RStudio a .Rmd file containing simple instructions on how to do some basic stuff using R Markdown. To see what the PDF of the default document looks like click on the Knit button at the top of the document window. A screen will appear showing the newly created .pdf document, the first page of which looks like this: The tasks in this weeks tutorial require you to modify this default document by coping over the code in the following sections and compiling and viewing the .pdf file each time. Further information: Additional information on getting started with Markdown can be found here. "],["title.html", "Title", " Title The title of the document can be found at the top of the .Rmd file within its preamble, which is shown below. When titling your document, ensure the title is within inverted commas. --- title: &quot;Example Report&quot; author: &quot;Annon.&quot; output: pdf_document: latex_engine: pdflatex number_sections: yes fig_caption: yes --- Task Give your document a suitable title and your name by copying and modifying the above code into Week3DA.Rmd. Knit the .Rmd file and notice what is produced in the Week3DA.pdf file. "],["sections.html", "Sections Subsections", " Sections Sections within an R Markdown document are created using #. For example, # Introduction will create a section titled Introduction with automatic numbering, i.e. Note: the section is numbered as we have set number_sections: yes within the preamble of the document. If you do not wish to have numbered sections, then set number_sections: no in the preamble. I would recommend using numbered sections as it makes it easier to refer to them within the text. Each section can be assigned labels so that they can be referred to within the text. For example, to give our Introduction section a label we simply add the label {#sec:intro} to the section title as follows: # Introduction {#sec:intro} where sec:intro is the name chosen for this particular section. It is a good idea to label your sections appropriately so that it is easy to refer to them later. The section can now be referred to within the text of the document using the \\ref command. That is Section \\ref{sec:intro} ... will produce Section 1 ... where the 1 is a clickable hyperlink that will take you to the beginning of that section within the document. Subsections Subsections can be added to a document in a similar fashion using ## such that ## Subsection {#sec:sub} will create a subsection with the label sec:sub and title Subsection: Task Create some suitable subsections in your document by copying and modifying the above code into Week3DA.Rmd. Knit the .Rmd file and notice what is produced in the Week3DA.pdf file. "],["code-chunks.html", "Code chunks Inline code", " Code chunks Code \"chunks\" allow for R code to be embedded within a document. Not only can the code be easily included within a document, the code can also be evaluated. Hence, you can produce an entire report based on an analysis that is contained within a single file instead of having separate files containing your R code, plot images and comments. Using R code within an R Markdown document is done within the following environment: ```{r label, echo=FALSE, eval=TRUE, warning=FALSE, message=FALSE} ``` where each code chunk is given its own label. The additional arguments are: echo: include the R code within the code chunk in the document (TRUE/FALSE, default=TRUE); eval: evaluate the R code within the code chunk (TRUE/FALSE, default=TRUE); warning: suppress warnings from R (TRUE/FALSE, default=TRUE); and message: suppress messages from R (TRUE/FALSE, default=TRUE). Often the first use of a code chunk in a R Markdown file is to load packages so that functions and datasets are available for analysis. For example, the following code chunk will load these packages: ggplot2 - to access the tidyverse visualization functions dplyr - to access the tidyverse data manipulation functions skimr - to access the tidyverse data summary functions moderndive - to access data on student feedback contained in evals datasets - to access the iris data frame ```{r loadpackages, echo=FALSE, eval=TRUE, warning=FALSE, message=FALSE} library(ggplot2) library(dplyr) library(moderndive) library(gapminder) library(skimr) library(mvtnorm) library(gridExtra) library(kableExtra) library(tidyr) ``` Then, let's say we wanted to select the score and bty_avg variables from the evals data set to be used later, we can do that using the following code chunk: ```{r evals, echo = FALSE, eval = TRUE, warning = FALSE} evals.scores &lt;- evals %&gt;% select(score, bty_avg) ``` This will evaluate the R code and store the subsetted data set as the object evals.scores so that it can be used later. If you want to embed the code within the Markdown document then you would simply set echo = TRUE and it will include the R code as follows: evals.scores &lt;- evals %&gt;% dplyr::select(score, bty_avg) Note: It is usually optional whether the package is specified in front of the function, as in dplyr::select here (compare to the previous code chunk above were select appears without the package name preceding it - both chunks of code do exactly the same thing), but if you have problems running a particular function, try including the package name and :: before the function. Also, you can always check what functions or datasets are in a particular package using help(package=\"packagename\") or refer to the cheat sheets. Additional arguments can be passed to code chunks other than those displayed above. The most useful ones other than those relate to figure sizing and positioning and are discussed in the Figures section later. Task Create some code chunks in your document by copying and modifying the above code into Week3DA.Rmd. Knit the .Rmd file and notice what is produced in the Week3DA.pdf file. Inline code R code can be included within text by enclosing the code with `r `. This allows for expressions to be evaluated by R and not be hardwired by the user. For example, if you wanted to convey the number of observations within evals.scores then we can enclose nrow(evals.scores) within `r ` to obtain the number of observations, rather than hard wiring \"463\" into the text. This can help to prevent potential human error when presenting information. It can also help with consistency and ease-of-use, since the number of observations could be stored as an R object, e.g. using `r n &lt;- nrow(evals.scores)`, and referred to whenever necessary within the text using `r n`. Further information: Additional details on all of the code chunk options can be found here and here. "],["tables-of-data.html", "Tables of data Tables of summaries Contingency Tables Tables of model estimates Tables 'by hand'", " Tables of data There are several ways to produce tables in Markdown. Here, a couple of different approaches will be presented. The first approach uses the kable function from the knitr package (see also the kableExtra package) and essentially puts a wrapper around the table produced in R in order to make it more visually appealing within the R Markdown document. Let's say we wanted to create a table of the first 5 rows of the iris data from the datasets library. We can create the table using the kable function as follows: ```{r table} kable(head(iris, n = 5), caption = &#39;\\\\label{tab:iris} The first 5 rows of the iris data.&#39;) ``` This produces the following table in the .pdf document: Notice that within the caption argument of the kable function there is \\\\label{tab:iris}. This is how you label tables in order to refer to the within the text. For example, Table \\ref{tab:iris} displays the first 5 rows of the iris data... will produce Table 1 displays the first 5 rows of the iris data... where, like for sections, the \"1\" will be a hyperlink directed to the table. See also the Example Report Markdown file for an example of using the kable_styling function for changing the size and positioning of a table. For example, its often useful to include kable_styling(font_size = 10, latex_options = 'HOLD_position') as the final term in the \"pipe\" to control the size of the font used to construct the table and to ensure the table appears at that location in the document (otherwise it may be placed at the bottom or top of the page). Further information: Additional details on using kable to produce tables can be found here and here. Tables of summaries Often we need to report summary statistics of continuous variables either overall or for different subsets using categorical variables. We can produce overall summaries 'manually' for an individual variable like this: iris %&gt;% summarise(n=n(),Mean=round(mean(Sepal.Length),digits=1), St.Dev=round(sd(Sepal.Length),digits=1), Min=min(Sepal.Length), Q1 = quantile(Sepal.Length,0.25), Median=median(Sepal.Length), Q3 = quantile(Sepal.Length,0.75), Max=max(Sepal.Length)) %&gt;% kable(caption = &#39;\\\\label{tab:summaries} Summary statistics on the sepal length of irises.&#39;) %&gt;% kable_styling(font_size = 10, latex_options = &quot;hold_position&quot;) Table 1: Summary statistics on the sepal length of irises. n Mean St.Dev Min Q1 Median Q3 Max 150 5.8 0.8 4.3 5.1 5.8 6.4 7.9 Alternatively, we can use the skim_with() function in the skimr package, to produce summaries of each varialbe like this: my_skim &lt;- skim_with(numeric = sfl(hist = NULL)) my_skim(iris) %&gt;% transmute(Variable=skim_variable, Mean=numeric.mean, SD=numeric.sd, Min=numeric.p0, Median=numeric.p50, Max=numeric.p100, IQR = numeric.p75-numeric.p50) %&gt;% kable(caption = &#39;\\\\label{tab:summariesskim} Summary statistics on the sepal length of irises.&#39;) %&gt;% kable_styling(font_size = 10, latex_options = &quot;hold_position&quot;) Table 2: Summary statistics on the sepal length of irises. Variable Mean SD Min Median Max IQR Species NA NA NA NA NA NA Sepal.Length 5.843333 0.8280661 4.3 5.80 7.9 0.60 Sepal.Width 3.057333 0.4358663 2.0 3.00 4.4 0.30 Petal.Length 3.758000 1.7652982 1.0 4.35 6.9 0.75 Petal.Width 1.199333 0.7622377 0.1 1.30 2.5 0.50 We can construct a table of summaries for the sepal length of the different species in the iris data introducing group_by((): iris %&gt;% group_by(Species) %&gt;% summarise(n=n(),Mean=round(mean(Sepal.Length),digits=1), St.Dev=round(sd(Sepal.Length),digits=1), Min=min(Sepal.Length), Q1 = quantile(Sepal.Length,0.25), Median=median(Sepal.Length), Q3 = quantile(Sepal.Length,0.75), Max=max(Sepal.Length)) %&gt;% kable(caption = &#39;\\\\label{tab:summariesby} Summary statistics on the sepal length by species of irises.&#39;) %&gt;% kable_styling(font_size = 10, latex_options = &quot;hold_position&quot;) Table 3: Summary statistics on the sepal length by species of irises. Species n Mean St.Dev Min Q1 Median Q3 Max setosa 50 5.0 0.4 4.3 4.800 5.0 5.2 5.8 versicolor 50 5.9 0.5 4.9 5.600 5.9 6.3 7.0 virginica 50 6.6 0.6 4.9 6.225 6.5 6.9 7.9 Alternatively, we can use the skim() function: my_skim &lt;- skim_with(base = sfl(n = length)) iris %&gt;% group_by(Species) %&gt;% select(Sepal.Length,Species) %&gt;% my_skim() %&gt;% transmute(Variable=skim_variable, Species=Species, n=n, Mean=numeric.mean, SD=numeric.sd, Min=numeric.p0, Median=numeric.p50, Max=numeric.p100, IQR = numeric.p75-numeric.p50) %&gt;% kable(caption = &#39;\\\\label{tab:summarybyskim} Summary statistics of the sepal length by species of irises (produced using skim() function).&#39;, booktabs = TRUE, linesep = &quot;&quot;, digits = 2) %&gt;% kable_styling(font_size = 10, latex_options = &quot;hold_position&quot;) Table 4: Summary statistics of the sepal length by species of irises (produced using skim() function). Variable Species n Mean SD Min Median Max IQR Sepal.Length setosa 50 5.01 0.35 4.3 5.0 5.8 0.2 Sepal.Length versicolor 50 5.94 0.52 4.9 5.9 7.0 0.4 Sepal.Length virginica 50 6.59 0.64 4.9 6.5 7.9 0.4 Task Include a table of summaries of Petal.Width for the different iris species in your document by copying and modifying the above code into Week3DA.Rmd. Knit the .Rmd file and notice what is produced in the Week3DA.pdf file. Contingency Tables Often we need to report summary statistics for different combinations of categorical variables' values. For instance, we can classify each iris as having a large or small sepal length and then construct a contingency table of the counts or large and small sepal lengths by the different species in the iris data using: iris %&gt;% mutate(sepal.length.class = if_else(Sepal.Length&lt;5.5,&#39;small&#39;,&#39;large&#39;)) %&gt;% group_by(Species, sepal.length.class) %&gt;% summarise(n=n()) %&gt;% spread(sepal.length.class, n) %&gt;% kable() %&gt;% kable_styling(font_size = 10, latex_options = &quot;hold_position&quot;) Species large small setosa 5 45 versicolor 44 6 virginica 49 1 We achieve this by including the spread() function, to create columns for each sepal length class, with the count n as the crosstab response value. One advantage of dplyr is that we can determine what kind of summary statistic we want to see very easily by adjusting our summarize() input. Here instead of displaying frequencies, we can get the average petal length by species &amp; sepal length class: iris %&gt;% mutate(sepal.length.class = if_else(Sepal.Length&lt;5.5,&#39;small&#39;,&#39;large&#39;)) %&gt;% group_by(Species, sepal.length.class) %&gt;% summarise(mean_petal.length=mean(Petal.Length))%&gt;% spread(sepal.length.class, mean_petal.length)%&gt;% kable(digits = 2) %&gt;% kable_styling(font_size = 10, latex_options = &quot;hold_position&quot;) Species large small setosa 1.42 1.47 versicolor 4.35 3.58 virginica 5.57 4.50 Lastly, we can find proportions by creating a new, calculated variable dividing row frequency by table frequency. iris %&gt;% mutate(sepal.length.class = if_else(Sepal.Length&lt;5.5,&#39;small&#39;,&#39;large&#39;)) %&gt;% group_by(Species, sepal.length.class) %&gt;% summarize(n=n())%&gt;% mutate(prop=n/sum(n))%&gt;% # our new proportion variable kable(digits = 2) %&gt;% kable_styling(font_size = 10, latex_options = &quot;hold_position&quot;) Species sepal.length.class n prop setosa large 5 0.10 setosa small 45 0.90 versicolor large 44 0.88 versicolor small 6 0.12 virginica large 49 0.98 virginica small 1 0.02 And we can create a contingency table of proportion values by applying the same spread command as before. Vary the group_by() and spread() arguments to produce proportions of different variables. iris %&gt;% mutate(sepal.length.class = if_else(Sepal.Length&lt;5.5,&#39;small&#39;,&#39;large&#39;)) %&gt;% group_by(Species, sepal.length.class) %&gt;% summarize(n=n())%&gt;% mutate(prop=n/sum(n))%&gt;% # our new proportion variable subset(select=c(&quot;Species&quot;,&quot;sepal.length.class&quot;,&quot;prop&quot;))%&gt;% #drop the frequency value spread(sepal.length.class, prop)%&gt;% kable(digits = 2) %&gt;% kable_styling(font_size = 10, latex_options = &quot;hold_position&quot;) Species large small setosa 0.10 0.90 versicolor 0.88 0.12 virginica 0.98 0.02 Tables of model estimates Often we also need to report the results of fitting a model to our data. For instance if we modeled the sepal length on the different species in the iris data by: \\[\\widehat{\\mbox{Sepal.Length}}(x) = \\widehat{\\alpha} + \\widehat{\\beta}_{\\mbox{versicolor}} \\cdot \\mathbb{I}_{\\mbox{versicolor}}(x) + \\widehat{\\beta}_{\\mbox{virginica}} \\cdot \\mathbb{I}_{\\mbox{virginica}}(x)\\] Then we could report the estimated values of \\(\\widehat{\\alpha}\\), \\(\\widehat{\\beta}_{\\mbox{versicolor}}\\) and \\(\\widehat{\\beta}_{\\mbox{virginica}}\\) by constructing the following table: ```{r fittedmodel} model &lt;- lm(Sepal.Length ~ Species, data = iris) get_regression_table(model) %&gt;% dplyr::select(term,estimate) %&gt;% #Note that it seems necessary to include &quot;dplyr::&quot; here!! kable(caption = &#39;\\\\label{tab:reg} Estimates of the parameters from the fitted linear regression model.&#39;) %&gt;% kable_styling(latex_options = &#39;HOLD_position&#39;) ``` model &lt;- lm(Sepal.Length ~ Species, data = iris) get_regression_table(model) %&gt;% dplyr::select(term,estimate) %&gt;% #Note that it seems necessary to include dplyr:: here!! kable(caption = &#39;\\\\label{tab:reg} Estimates of the parameters from the fitted linear regression model.&#39;) %&gt;% kable_styling(latex_options = &#39;HOLD_position&#39;) Table 5: Estimates of the parameters from the fitted linear regression model. term estimate intercept 5.006 Species: versicolor 0.930 Species: virginica 1.582 Tables 'by hand' Tables can also be produced \"by hand\"\" in Markdown. For example, the table above corresponding to the first 5 rows of the iris data can be produced by hand by typing the following text (without any other text) into a .Rmd file: Sepal Length | Sepal Width | Petal Length | Petal Width | Species :-------------:|:-------------:|:--------------:|:-------------:|---------: 5.1 | 3.5 | 1.4 | 0.2 | setosa 4.9 | 3.0 | 1.4 | 0.2 | setosa 4.7 | 3.2 | 1.3 | 0.2 | setosa 4.6 | 3.1 | 1.5 | 0.2 | setosa 5.0 | 3.6 | 1.4 | 0.2 | setosa Table: The first 5 rows of the iris data. This produces the following table: The first 5 rows of the iris data. Sepal Length Sepal Width Petal Length Petal Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa The vertical separators | are used between columns, while --- is placed below table/column headings. Alignment of the columns is done using colons, that is, for left alignment put :---, for right alignment put ---:, and for centred alignment put :---:. Tables created by hand can be labelled and referenced to in a similar way to other tables. Having the caption as Table: \\label{tab:iris_by_hand}The first 5 rows of the iris data. will automatically label the above table. This can easily be referenced to within the text using \\ref{tab:iris_by_hand}. Further information: Additional details on creating tables by hand can be found here. "],["figures.html", "Figures", " Figures Including plots within an R Markdown document is straightforward. The R code for the plot is simply included within a code chunk including additional arguments for plot size and positioning. For example, this code chunk in the .Rmd file will produce the scatterplot of teaching and beauty scores below: ```{r scatplot, echo = FALSE, eval = TRUE, out.width = &#39;70%&#39;, fig.align = &quot;center&quot;, fig.pos = &quot;h&quot;, warning = FALSE, fig.cap = &quot;\\\\label{fig:scat} Relationship between teaching and beauty scores. The best-fitting line has been superimposed.&quot;} ggplot(evals.scores, aes(x = bty_avg, y = score)) + geom_point() + labs(x = &quot;Beauty Score&quot;, y = &quot;Teaching Score&quot;) + geom_smooth(method = &quot;lm&quot;, se = FALSE) ``` Figure 1: Relationship between teaching and beauty scores. The best-fitting line has been superimposed. NB: The \"Figure 1:\" label doesn't appear here before the caption, but it does in the .pdf file - see ExampleReport.pdf generated by ExampleReport.Rmd Here, we have echo = FALSE and eval = TRUE as we only want to put the plot into the document and not the accompanying R code. Labelling is done the same way as with tables, that is, the label \\\\label{fig:scat} is placed within the figure caption, which is given by the argument fig.cap. For size and positioning of the figure we can include: out.width: a percentage of the actual size of the produced plot; fig.width: an integer value denoting the width of the figure; fig.align: the alignment of the figure within the body of the document; and fig.pos: can be used to force the positioning of the figure within the document. See Table 4 for a list of arguments taken from here. Different arguments to fig.pos. Parameter Position h Place the float here, i.e., approximately at the same point it occurs in the source text (however, not exactly at the spot) t Position at the top of the page. b Position at the bottom of the page. p Put on a special page for floats only. ! Override internal parameters LaTeX uses for determining \"good\" float positions. H Places the float at precisely the location in the LATEX code. Requires the float package. This is somewhat equivalent to h!. For examples of using each of the above arguments see the Example Report Markdown file ExampleReport.Rmd. Task Include a plot showing the relationship between the teaching score and the age of the professors in your document by copying and modifying the above code into Week3DA.Rmd. Knit the .Rmd file and notice what is produced in the Week3DA.pdf file. Further information: Additional notes on figures can be found here. "],["mathematics.html", "Mathematics", " Mathematics Mathematics and statistical equations can be presented nicely within an R Markdown document using LaTeX notation. For example, the following equation referring to a linear regression model: \\[y_i = \\alpha + \\beta x_i + \\epsilon_i, ~~~~ \\epsilon_i \\sim N(0, \\sigma^2),\\] is produced using the following code: $$y_i = \\alpha + \\beta x_i + \\epsilon_i, ~~~~ \\epsilon_i \\sim N(0, \\sigma^2),$$ That is, we use: $$ signs to produce mathematics which is centred on a new line, and a single $ to include mathematics within a sentence or paragraph; _ and ^ are used for subscripts and superscripts, respectively; Greek letters are obtained using \\ and the letters name, i.e. \\alpha gives \\(\\alpha\\); and tildes (~) are used to put spacing between notation. For additional tricks inserting mathematics into documents see the Example Report Markdown file ExampleReport.Rmd. Task Include an equation describing the relationship between the teaching score and the age of the professors in your document by copying and modifying the above code into Week3DA.Rmd. Knit the .Rmd file and notice what is produced in the Week3DA.pdf file. Further information: Additional details on including mathematics into Markdown documents can be found here and here. "],["further-task.html", "Further Task", " Further Task The following task is here to help you prepare for the class test in Week 5. For the class test you will be given a data set to analyse and produce a report using R Markdown given a basic template. Using the Basic Template from Moodle, write a report based on the following data sets. There are several categorical variables in the evals data set on the student evaluations of a large sample of professors, for example the ethnicity of the professors (\"minority\" or \"not minority\") and the rank of the professors (i.e. low-status, mid-status or high-status). Choose one of these categorical variables and prepare a report describing the differences between the different categories of the average evaluation score of the professors. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
